<template>
  <view>
  <view class="page-scroll" id="scroll" wx:if="{{__mpx_mode__ === 'web'}}">
    <base-header></base-header>
    <view class="page-wrapper" id="wrapper">
      <view class="page-inner" style="{{currentStyle}}">
        <view class="page-container" catchtouchmove="stopEvent">
          <base-tab bindselect="handleSelect"></base-tab>
          <view wx:if="{{hasMenu}}" class="page-menu" style="height: {{height-50}}px">
            <view scroll-y="{{true}}" style="height: 100%; overflow: scroll;">
              <base-menu activeIndex="{{activeIndex}}" bindselect="handleActive"></base-menu>
              <view class="page-empty"></view>
            </view>
          </view>
          <view wx:if="{{hasMenu}}" class="page-title" style="transform: translate3d(0, {{translateY}}px, 0)">{{getTitle}}</view>
        </view>
      </view>
    </view>
    <view id="food" style="min-height: {{height-50}}px;">
      <component is="{{current}}" bindsize="handleSize"></component>
      <view class="page-empty"></view>
    </view>
    <!-- 必须在scroll-view里面定位，因为触摸滚动的时候会卡顿 -->
    <view class="page-bottom">
      <base-bottom></base-bottom>
    </view>
    <base-dialog></base-dialog>
  </view>
  <scroll-view
    style="height: {{height}}px"
    scroll-y="{{!showVisible}}"
    bindscroll="handleScroll"
    scroll-top="{{scrollTop}}"
    wx:ref="scrollview"
    wx:else>
    <base-header></base-header>
    <view class="page-wrapper" id="wrapper">
      <view class="page-inner" style="{{currentStyle}}">
        <view class="page-container" catchtouchmove="stopEvent">
          <base-tab bindselect="handleSelect"></base-tab>
          <view wx:if="{{hasMenu}}" class="page-menu" style="height: {{height-50}}px">
            <scroll-view scroll-y="{{true}}" style="height: 100%">
              <base-menu activeIndex="{{activeIndex}}" bindselect="handleActive"></base-menu>
              <view class="page-empty"></view>
            </scroll-view>
          </view>
          <view wx:if="{{hasMenu}}" class="page-title" style="transform: translate3d(0, {{translateY}}px, 0)">{{getTitle}}</view>
        </view>
      </view>
    </view>
    <view id="food" style="min-height: {{height-50}}px;">
      <component is="{{current}}" bindsize="handleSize"></component>
      <view class="page-empty"></view>
    </view>
    <!-- 必须在scroll-view里面定位，因为触摸滚动的时候会卡顿 -->
    <view class="page-bottom">
      <base-bottom></base-bottom>
    </view>
    <base-dialog wx:if="{{__mpx_mode__ !== 'web'}}"></base-dialog>
  </scroll-view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  import dll from '../lib/dll'
  import Store from '../store/index'
  console.log(dll)
  let top = 0
  let flag = false
  let foodHeight = 0
  let nodeList = []
  let hasScroll = false

  createPage({
    data: {
      height: 0,
      currentStyle: '',
      current: 'base-food',
      hasMenu: true,
      color: '',
      title: '折扣',
      activeIndex: 0,
      scrollTop: 0,
      translateY: 0
    },
    computed: {
      ...Store.mapGetters(['foodList']),
      ...Store.mapState(['showVisible']),
      getTitle () {
        return this.foodList[this.activeIndex] && this.foodList[this.activeIndex].categoryName
      },
      getSafeStyle () {
        return __mpx_mode__ === 'web' && this.currentStyle
      }
    },
    methods: {
      ...Store.mapActions(['updateShopList']),
    },
    onLoad () {
      wx.getSystemInfo({
        success: (res) => {
          this.height = res.windowHeight
        }
      })
      // 初始化店铺的数据
      this.updateShopList()
      this.$nextTick(() => {
        const query = wx.createSelectorQuery()
        query.select('#wrapper').boundingClientRect((res) => {
          top = res.top
        }).exec()
        query.select('#food').boundingClientRect((res) => {
          foodHeight = res.height
        }).exec()
      })
    },
    onReady () {
      if (__mpx_mode__ === 'web') {
        const el = document.getElementById('scroll')
        el.addEventListener('scroll', (e) => {
          this.handleScroll({ detail: { scrollTop: e.target.scrollTop } })
        })
        window.onhashchange = () => {
          this.handleScroll({ detail: { scrollTop: 0 } })
          this.activeIndex = 0
        }
      }
    },
    handleScroll (e) {
      let scrollTop = e.detail.scrollTop
      for (let i = 0; i < nodeList.length; i++) {
        const element = nodeList[i]
        const nextEle = nodeList[i+1]
        // 50是标题栏的高度
        if (scrollTop >= element.top - 50 && (!nextEle || nextEle.top - 50 > scrollTop)) {
          if (this.activeIndex !== i) {
            this.activeIndex = i
          }
          break
        }
      }
      if (scrollTop > nodeList[this.activeIndex+1].top - 80 && scrollTop < nodeList[this.activeIndex+1].top + 30) {
        this.translateY = nodeList[this.activeIndex+1].top - 80 - scrollTop
      } else {
        if (this.translateY) {
          this.translateY = 0
        }
      }
      if (hasScroll) {
        // 解决scroll-view滚动无效的问题
        this.scrollTop = scrollTop
        hasScroll = false
      }
      if (foodHeight <= this.height ) {
        return
      }
      if (scrollTop > top && !flag) {
        flag = true
        this.currentStyle = 'position: fixed;'
        // console.log('吸顶')
      }
      if (scrollTop < top && flag) {
        flag = false
        this.currentStyle = ''
        // console.log('恢复')
      }
    },
    stopEvent () {
      // 阻止冒泡，防止滚动菜单的时候滚动菜品
    },
    handleSelect (e) {
      // 动态组件切换
      const map = ['base-food', 'base-evaluate', 'base-business']
      const index = e.detail.index
      this.current = map[index]
      if (this.current === 'base-food') {
        this.hasMenu = true
        this.color = ''
      } else {
        this.hasMenu = false
        this.color = '#f5f5f5'
      }
      if (__mpx_mode__ === 'web') {
        const el = document.getElementById('scroll')
        el.scrollTop = 0
      } else {
        console.log('设置top')
        this.scrollTop = Math.random()
      }
      this.activeIndex = 0
      // todo:需要刷新scroll-view高度
    },
    handleSize (e) {
      nodeList = e.detail.nodeList
    },
    handleActive (e) {
      const index = e.detail.index
      if (__mpx_mode__ === 'web') {
        const el = document.getElementById('scroll')
        el.scrollTop = nodeList[index] && nodeList[index].top - 50
        return
      }
      setTimeout(() => {
        hasScroll = true
      }, 50)
      this.scrollTop = nodeList[index] && nodeList[index].top - 50
    }
  })
</script>

<style lang="stylus">
  //隐藏滚动条
  ::-webkit-scrollbar
    width 0
    height 0
    color transparent
    display none

  .page-header
    height 200px
    width 100%
    background pink
  .page-content
    width 100%
    overflow-y scroll
  .page-item
    height 200px
    width 100%
    border 1px solid red
  .page-wrapper
    height 50px
    position relative
  .page-inner
    height 50px
    width 100%
    position absolute
    left 0
    top 0
    z-index 10
  .page-container
    width 100%
    height 100%
    position relative
  .page-tab
    width 100%
    height 100%
  .page-menu
    width 80px
    height 0
    position absolute
    left 0
    top 51px
    z-index 99
    background #f5f5f5
  .page-bottom
    position fixed
    left 0
    bottom 0
    height 50px
    width 100%
    z-index 100
  .page-empty
    height 50px
    width 100%
  .page-title
    margin-left 80px
    padding-left 10px
    line-height 36px
    background #fff
    font-size 12px
    color #333
    position absolute
    width 100%
  .page-scroll
    width 100%
    height 100%
    overflow-y scroll
    overflow-x hidden
</style>

<script type="application/json">
  {
    "usingComponents": {
      "base-header": "../components/base-header.mpx",
      "base-tab": "../components/base-tab.mpx",
      "base-menu": "../components/base-menu.mpx",
      "base-food": "../components/base-food.mpx",
      "base-bottom": "../components/base-bottom.mpx",
      "base-business": "../components/base-business.mpx",
      "base-evaluate": "../components/base-evaluate.mpx",
      "base-dialog": "../components/base-dialog.mpx"
    }
  }
</script>
